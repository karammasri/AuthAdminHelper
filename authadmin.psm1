<# 
    Authentication Admin module
    Version: 1.0.0

    This is a module that implements functions that complement the currently implemented functionality
    for the Authentication Administrator role in Azure AD

    This is currently a beta level script and intended to be used as a demonstration script

    THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
    ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
    PARTICULAR PURPOSE.

    Author: kmasri@microsoft.com
    Copyright (c) Microsoft Corporation. All rights reserved.
#>

#requires -Version 5.1

Set-StrictMode -Version 'Latest'

# RegEx to check if an UPN looks valid
$UPNRegEx = "(?i)^[A-Z0-9][A-Z0-9.#_%+-]{0,63}@(?:[A-Z0-9]+(?:-[A-Z0-9]+)*\.)+[A-Z]{2,63}$"

$ConnectedToMSOL = $false
$InitialDomain = ""
$AuthAdminRoleID = $null

# The aliases of the MFA methods used in AAD
enum MFAMethods
{
    TwoWayVoiceMobile          = 0   # Voice call to primary authentication phone
    TwoWayVoiceAlternateMobile = 1   # Voice call to alternate authentication phone
    TwoWayVoiceOffice          = 2   # Voice call to office phone
    OneWaySMS                  = 3   # One way SMS message with OTP
    PhoneAppOTP                = 4   # OTP generated by authenticator app
    PhoneAppNotification       = 5   # Push notification to authenticator app
}

function Connect-MSOL
{
    [CmdletBinding()]

    param
    (
        [Parameter()]
        [switch]
        $Force
    )

    if (($script:ConnectedToMSOL) -and (!$Force))
    {
        return $true
    }

	# Verify required modules are present
	$MSOLModuleInfo = @{ModuleName='MSOnline'; ModuleVersion='1.1.183'}

	if ($null -eq (Get-Module -FullyQualifiedName $MSOLModuleInfo -ListAvailable))
	{
		Write-Error "Missing MSOnline module."
		return $false
	}

	$AzureADModuleInfo = @{ModuleName='AzureAD*'; ModuleVersion='2.0.2'}    # The wildcard allows to find the preview module if present
	if ($null -eq (Get-Module -FullyQualifiedName $AzureADModuleInfo -ListAvailable))
	{
		Write-Error "Missing AzureAD module."
		return $false
	}

    Connect-MsolService
    if (!$?)
    {
        Write-Error "Unable to connect to MSOnline."
        return $false
    }

	# Get an access token for AAD Graph to be used by the AzureAD module
	# using the context already acquired with the MSOL module

	$ClientId    = "1b730954-1685-4b74-9bfd-dac224a7b894"
	$AADGraphURI = "https://graph.windows.net"
	$Authority   = "https://login.microsoftonline.com/common"
	$RedirectUri = "urn:ietf:wg:oauth:2.0:oob"

	$PlatformParameters = New-Object -TypeName Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters -ArgumentList ([Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior]::Auto)

	try
	{
		$AuthenticationContext = New-Object -TypeName Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext -ArgumentList $Authority
		if (!$AuthenticationContext)
		{
			throw
		}
	
		$AuthenticationResult = $AuthenticationContext.AcquireTokenAsync($AADGraphURI, $ClientId, $RedirectUri, $PlatformParameters)
		if (!$AuthenticationResult)
		{
			throw
		}

		Connect-AzureAD -AadAccessToken $AuthenticationResult.Result.AccessToken -AccountId $AuthenticationResult.Result.UserInfo.DisplayableId -ErrorAction Stop | Out-Null
	}
	catch
	{
		$script:ConnectedToMSOL = $false
		return $false
	}

    $script:ConnectedToMSOL = $true

    return $true
}

function Get-InitialDomain
{
    if(($script:InitialDomain) -and ($script:InitialDomain.Length -gt 0))
    {
        return $true
    }

    if (!(Connect-MSOL))
    {
        return $false
    }

    $Domain = @(Get-MSOLDomain | Where-Object { $_.IsInitial })
    if ((!$?) -or (!$Domain) -or ($Domain.Count -ne 1))
    {
        Write-Error "Unable to determine initial domain."
        return $false
    }

    $script:InitialDomain = $Domain[0].Name
    
    return $true
}

function Get-MFAUser
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory = $true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName
    )

    
    if (($UserPrincipalName.Length -gt 254) -or ($UserPrincipalName -notmatch $UPNRegEx))
    {
        Write-Error "Invalid UPN"
        return $null
    }

    if (!(Connect-MSOL))
    {
        return $null
    }

    $User = Get-MsolUser -UserPrincipalName $UserPrincipalName -ErrorAction SilentlyContinue
    if ($User)
    {
        return $user            
    }

    # Lets try to find out if the user is B2B and the UPN has been mangled
    if (Get-InitialDomain)
    {
        $B2BUPN = (($UserPrincipalName -split "@") -join "_") + "#EXT#@" + $InitialDomain
        $User = Get-MsolUser -UserPrincipalName $B2BUPN -ErrorAction SilentlyContinue
        if (($User) -and ($User.SignInName -eq $UserPrincipalName))
        {
            Write-Verbose "$UserPrincipalName is a B2B user. User UPN: $($User.UserPrincipalName)."
            return $User
        }
    }

    Write-Error "Cannot find user with UPN $UserPrincipalName."
    return $null
}

<#
.SYNOPSIS
Resets the MFA authentication methods for a user

.DESCRIPTION
Resets the MFA authentication methods for a user. All the MFA methods are removed and the user will have to re-register.

An authentication prompt is displayed if a session to Azure AD hasn't been established.

The cmdlet will prompt for confirmation before committing the changes.

.PARAMETER UserPrincipalName
The UserPrincipalName in Azure AD of the user to reset the MFA methods for.

.EXAMPLE
Reset-MFAUserAuthenticationMethods -UserPrincipalName johndoe@contoso.com

Resets the MFA methods of the user johndoe@contoso.com.

.INPUTS
None

.OUTPUTS
None

.NOTES
An error is generated if the calling user doesn't have permissions over the target user.
#>
function Reset-MFAUserAuthenticationMethods
{
    [CmdletBinding(SupportsShouldProcess = "True", ConfirmImpact = "High")]

    param
    (
        [Parameter(Mandatory = $true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName
    )

    $User = Get-MFAUser -UserPrincipalName $UserPrincipalName

    if ($null -eq $User)
    {
        return
    }

    # As of 01MAR19, Get-MSOLUser returns $null in StrongAuthenticationMethods if the
    # user running the cmdlet does not have permissions over the target object,
    # but returns an empty collection if the permission is granted but the collection is empty
    $Methods = $User.StrongAuthenticationMethods
    if ($null -eq $Methods)
    {
        Write-Error "You don't have permissions to reset MFA methods for $UserPrincipalName."
        return
    }

    if ($Methods.Count -eq 0)
    {
        Write-Warning "No MFA authentication methods registered for $UserPrincipalName."
        return
    }

    $ShouldProcessDescription = "Reset MFA methods for user $UserPrincipalName"
    $ShouldProcessWarning = "$UserPrincipalName has $($Methods.Count) MFA methods registered.`n"
    $ShouldProcessWarning += "Are you sure that you want to remove all these MFA methods?"

    if ($PSCmdlet.ShouldProcess($ShouldProcessDescription, $ShouldProcessWarning, ""))
    {
        Set-MsolUser -UserPrincipalName $UserPrincipalName -StrongAuthenticationMethods @()
        if (!$?)
        {
            Write-Error "Unable to reset authentication methods for $UserPrincipalName."
            return
        }

        Write-Information "MFA methods reset for user $UserPrincipalName."
    }
}
Export-ModuleMember -Function 'Reset-MFAUserAuthenticationMethods'

<#
.SYNOPSIS
Sets the default MFA authentication method for a user

.DESCRIPTION
Sets the default MFA authentication methods for a user. The user should have already registered the method to set as default.

The list of registered MFA methods for a user can be obtained by running Get-MFAUserAuthenticationMethods.
The list of possible values for the method parameter can be obtained from the output of Get-MFAUserAuthenticationMethods
or by running Show-MFAMethodsNames.

An authentication prompt is displayed if a session to Azure AD hasn't been established.

.PARAMETER UserPrincipalName
The UserPrincipalName in Azure AD of the user to set the default MFA methods for.

.PARAMETER Method
The new default method to set. The target user should already have this method registered. Tab-completion can be used to
cycle through the available values.

.EXAMPLE
Set-MFAUserDefaultAuthenticationMethod -UserPrincipalName johndoe@contoso.com -Method TwoWayVoiceMobile

Sets the default MFA method for johndoe@contoso.com to TwoWayVoiceMobile.

.EXAMPLE
Set-MFAUserDefaultAuthenticationMethod -UserPrincipalName janedoe@contoso.onmicrosoft.com -Method PhoneAppNotification

Sets the default MFA method for janedoe@contoso.onmicrosoft.com to PhoneAppNotification.

.NOTES
An error is generated if the calling user doesn't have permissions over the target user.
#>
function Set-MFAUserDefaultAuthenticationMethod
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory = $true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName,

        [Parameter(Mandatory = $true)]
        [MFAMethods]
        $Method
    )

    $User = Get-MFAUser -UserPrincipalName $UserPrincipalName

    if ($null -eq $User)
    {
        return
    }

    # As of 01MAR19, Get-MSOLUser returns $null in StrongAuthenticationMethods if the
    # user running the cmdlet does not have permissions over the target object,
    # but returns an empty collection if the permission is granted but the collection is empty
    $Methods = $User.StrongAuthenticationMethods
    if ($null -eq $Methods)
    {
        Write-Error "You don't have permissions to set MFA methods for $UserPrincipalName."
        return
    }

    if ($Methods.Count -eq 0)
    {
        Write-Warning "No MFA authentication methods registered for $UserPrincipalName."
        return
    }
    
    $CurrentDefault = -1
    $NewDefault = -1

    for ($i = 0; $i -lt $Methods.Count; $i++)
    {
        if ($Methods[$i].IsDefault)
        {
            $CurrentDefault = $i
        }

        if ($Methods[$i].MethodType -eq $Method)
        {
            $NewDefault = $i
        }
    }

    if ($NewDefault -eq -1)
    {
        Write-Error "Method $Method is not registered for user $($User.UserPrincipalName)."
        return
    }

    if ($NewDefault -eq $CurrentDefault)
    {
        Write-Information "User $($User.UserPrincipalName) already has method $Method as the default."
        return
    }

    if ($CurrentDefault -ne -1)
    {
        $Methods[$CurrentDefault].IsDefault = $false
    }
    else
    {
        Write-Warning "User $UserPrincipalName has no current default authentication methods."
    }

    $Methods[$NewDefault].IsDefault = $true

    Set-MsolUser -UserPrincipalName $User.UserPrincipalName -StrongAuthenticationMethods $Methods
    if (!$?)
    {
        Write-Error "Unable to set the default authentication method for $($User.UserPrincipalName)."
        return
    }

    Write-Information "Default authentication method for $($User.UserPrincipalName) set to $Method."
}
Export-ModuleMember -Function 'Set-MFAUserDefaultAuthenticationMethod'

<#
.SYNOPSIS
Gets the MFA authentication methods of a user

.DESCRIPTION
Gets the list of MFA authentication methods registered by a user, including the selected default method.
Only registered methods are listed.

Each returned method includes a property named IsDefault. The property will contain the value “True” for 
the default authentication method and “False” for all the other methods.

An authentication prompt is displayed if a session to Azure AD hasn't been established.

.PARAMETER UserPrincipalName
The UserPrincipalName in Azure AD of the user to set the default MFA methods for.

.EXAMPLE
Get-MFAUserAuthenticationMethods -UserPrincipalName johndoe@contoso.com

Gets the MFA methods registered for johndoe@contoso.com.

.INPUTS
None

.OUTPUTS
A collection of PowerShell custom objects, each of these objects has two properties:
* MethodType (String): the method alias
* IsDefault (Boolean): True if this object represents the default method, False otherwise

.NOTES
An error is generated if the calling user doesn't have permissions over the target user.
#>
function Get-MFAUserAuthenticationMethods
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory = $true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName
    )

    $User = Get-MFAUser -UserPrincipalName $UserPrincipalName

    if ($null -eq $User)
    {
        return
    }

    # As of 01MAR19, Get-MSOLUser returns $null in StrongAuthenticationMethods if the
    # user running the cmdlet does not have permissions over the target object,
    # but returns an empty collection if the permission is granted but the collection is empty
    $Methods = $User.StrongAuthenticationMethods
    if ($null -eq $Methods)
    {
        Write-Error "You don't have permissions to get MFA methods for $UserPrincipalName."
        return
    }

    if ($Methods.Count -eq 0)
    {
        Write-Warning "No MFA authentication methods are registered for $UserPrincipalName."
        return
    }

    if (@($Methods | Where-Object { $_.IsDefault }).Count -eq 0)
    {
        Write-Warning "User $($user.UserPrincipalName) has no default method."
    }

    Write-Information "Registered MFA methods for user $UserPrincipalName"
    $Methods | Select-Object -Property MethodType, IsDefault
}
Export-ModuleMember -Function 'Get-MFAUserAuthenticationMethods'

<#
.SYNOPSIS
Shows the list of aliases used to identity MFA methods.

.DESCRIPTION
Shows the list of aliases used to identity MFA methods.

.EXAMPLE
Get-MFAMethodsAliases

Shows the list of aliases used to identity MFA methods

.INPUTS
None

.OUTPUTS
None
#>
function Get-MFAMethodsAliases
{
    [enum]::GetNames([MFAMethods])
}
Export-ModuleMember -Function 'Get-MFAMethodsAliases'

<#
.SYNOPSIS
Disables per-user MFA configuration (enabled/enforced) in an Azure AD account without removing the already registered methods.

.DESCRIPTION
This cmdlet allows to disable per-user MFA configuration for a user without loosing the MFA methods already registered by the user.

Disabling per-user MFA using the MFA portal also removes the authentication methods already registered by the user. This forces the user to have to re-register 
the authentication methods again once a conditional access policy that requires MFA applies to the. This could complicate the process of moving user from 
per-user MFA, and potentially add help desk calls.

.PARAMETER UserPrincipalName
The UserPrincipalName in Azure AD of the user to convert from per-user MFA.

.PARAMETER RemoveMethods
Indicates that the currently registered MFA methods by the user should be removed as part of disabling per-user MFA.

.EXAMPLE
Disable-PerUserMFA -UserPrincipalName johndoe@contoso.com

Disables per-user MFA for the user johndoe@contoso.com without removing the registered MFA methods.

.EXAMPLE
Disable-PerUserMFA -UserPrincipalName johndoe@contoso.com -RemoveMethods

Disables per-user MFA for the user johndoe@contoso.com and removes the registered MFA methods.

.INPUTS
None

.OUTPUTS
None

.NOTES
An error is generated if the calling user doesn't have permissions over the target user.
#>
function Disable-PerUserMFA
{
    [CmdletBinding()]

    param
    (
        [Parameter(Mandatory = $true)]
        [Alias("UPN")]
        [string]
        $UserPrincipalName,

        [Parameter()]
        [switch]
        $RemoveMethods
    )

    $User = Get-MFAUser -UserPrincipalName $UserPrincipalName

    if ($null -eq $User)
    {
        return
    }

    # As of 01MAR19, Get-MSOLUser returns $null in StrongAuthenticationMethods if the
    # user running the cmdlet does not have permissions over the target object,
    # but returns an empty collection if the permission is granted but the collection is empty
    $Methods = $User.StrongAuthenticationMethods
    if ($null -eq $Methods)
    {
        Write-Error "You don't have permissions to modify MFA properties for $UserPrincipalName."
        return
    }

    if ($User.StrongAuthenticationRequirements.Count -eq 0)
    {
        Write-Error "$UserPrincipalName is not configured for per-user MFA."
        return
    }
    
    Set-MsolUser -UserPrincipalName $UserPrincipalName -StrongAuthenticationRequirements @()
    if (!$?)
    {
        Write-Error "Cannot disable per-user MFA for user $UserPrincipalName."
        return
    }

    if (($Methods.Count -gt 0) -and (!$RemoveMethods))       
    {
        Set-MsolUser -UserPrincipalName $UserPrincipalName -StrongAuthenticationMethods $Methods
        if (!$?)
        {
            Write-Warning "Cannot restore registered MFA Methods for $UserPrincipalName."
        }
    }

    $Message = "Disabled per-user MFA for $UserPrincipalName. $($Methods.Count) existing registered MFA methods were "
    if ($RemoveMethods)
    {
        $Message += "removed."
    }
    else
    {
        $Message += "kept."
    }
    Write-Information $Message
}
Export-ModuleMember -Function 'Disable-PerUserMFA'

function Get-AUByName
{
	param
	(
		[Parameter(Mandatory = $true)]
		[string]
		$AUName
	)

    if (!(Connect-MSOL))
    {
        return $null
	}
	
	try
	{
		$Filter = "DisplayName eq '$AUName'"
		$AU = @(Get-AzureADAdministrativeUnit -Filter $Filter)
		if ($AU.Count -ne 1)
		{
			return $null
		}
	}
	catch
	{
		return $null
	}

	return $AU[0].ObjectId
}

function Get-AuthAdminRoleID
{
	if ($null -ne $Script:AuthAdminRoleID)
	{
		return $true
	}

	$AuthAdminRole = @(Get-AzureADDirectoryRole | Where-Object { $_.DisplayName -eq "Authentication Administrator" })
	if (($null -eq $AuthAdminRole) -or ($AuthAdminRole.Count -ne 1))
	{
		return $false
	}

	$Script:AuthAdminRoleID = $AuthAdminRole[0].ObjectId
	return $true
}

<#
.SYNOPSIS
Lists delegated Authentication Administrators to an Administrative Unit.

.DESCRIPTION
This cmdlet allows to list the Authentication Administrators role to a specific Administrative Unit.

.PARAMETER AdministrativeUnitName
The name of the Administrative Unit to  which  Authentication Administrator is going to be delegated.

.EXAMPLE
Get-DelegatedAuthAdminsToAU -AdministrativeUnitName AUName

List the delegated Authentication Administrators to the Administrative Unit AUName.

.INPUTS
None

.OUTPUTS
None

.NOTES
An error is also generated if the calling user doesn't have permissions to perform the operation.
#>
function Get-DelegatedAuthAdminsToAU
{
	[CmdletBinding()]

	param
	(
		[Parameter(Mandatory = $true)]
		[Alias('AUName')]
		[string]
		[ValidateNotNullOrEmpty()]
		$AdministrativeUnitName
	)

	$AUId = Get-AUByName -AUName $AdministrativeUnitName
	if (!$AUId)
	{
		Write-Error "Cannot find Administrative Unit with name: $AdministrativeUnitName"
		return
	}

	if (!(Get-AuthAdminRoleID))
	{
		Write-Error "Unable to get the role ID for the Authentication Administrator role"
		return
	}

	try
	{
		$ScopedAdmins = @(Get-AzureADScopedRoleMembership -ObjectId $AUId | Where-Object { $_.RoleObjectId -eq $Script:AuthAdminRoleID})

		if ($ScopedAdmins.Count -eq 0)
		{
			Write-Warning "No delegated administrator exists for Administrative Unit $AdministrativeUnitName"
			return
		}
		else
		{
			$ScopedAdmins | Select-Object -ExpandProperty RoleMemberInfo | Select-Object -Property DisplayName, UserPrincipalName
		}
	}
	catch
	{
		return
	}
}
Export-ModuleMember -Function 'Get-DelegatedAuthAdminsToAU'

function Get-AuthAdminRoleID
{
	if ($null -ne $Script:AuthAdminRoleID)
	{
		return $true
	}

	try
	{
		$AuthAdminRole = @(Get-AzureADDirectoryRole | Where-Object { $_.DisplayName -eq "Authentication Administrator" })
		if (($null -eq $AuthAdminRole) -or ($AuthAdminRole.Count -ne 1))
		{
			return $false
		}
	}
	catch
	{
		return $false
	}

	$Script:AuthAdminRoleID = $AuthAdminRole[0].ObjectId
	return $true
}

<#
.SYNOPSIS
Adds a delegate Authentication Administrator to an Administrative Unit.

.DESCRIPTION
This cmdlet allows to delegate the Authentication Administrator role to a specific Administrative Unit.

.PARAMETER AdministrativeUnitName
The name of the Administrative Unit to  which  Authentication Administrator is going to be delegated.

.PARAMETER AuthenticationAdminUPN
The UserPrincipalName of the delegated Authentication Administrator to add.

.EXAMPLE
Add-DelegatedAuthAdminsToAU -AdministrativeUnitName AUName -AuthenticationAdminUPN AdminUPN

Adds user with UserPrincipalName AdminUPN as an Authentication Administrator to the Administrative Unit AUName.

.INPUTS
None

.OUTPUTS
None

.NOTES
An error is generated if the user with UserPrincipalName supplied is already delegated as an Authentication Administrator over the Administrative Unit.

An error is also generated if the calling user doesn't have permissions to perform the operation.
#>
function Add-DelegatedAuthAdminsToAU
{
	[CmdletBinding()]

	param
	(
		[Parameter(Mandatory = $true)]
		[Alias('AUName')]
		[string]
		[ValidateNotNullOrEmpty()]
		$AdministrativeUnitName,

		[Parameter(Mandatory = $true)]
		[Alias('UPN')]
		[string]
		[ValidateNotNullOrEmpty()]
		$AuthenticationAdminUPN		
	)

	$AUId = Get-AUByName -AUName $AdministrativeUnitName
	if (!$AUId)
	{
		Write-Error "Cannot find Administrative Unit with name: $AdministrativeUnitName"
		return
	}

	if (!(Get-AuthAdminRoleID))
	{
		Write-Error "Unable to get the role ID for the Authentication Administrator role"
		return
	}

	$AuthAdminUser = Get-MFAUser -UserPrincipalName $AuthenticationAdminUPN
	if ($null -eq $AuthAdminUser)
	{
		Write-Error "Cannot find user with UPN $AuthenticationAdminUPN"
		return
	}

	try
	{
		$IsInRoleAlready = (@(Get-AzureADScopedRoleMembership -ObjectId $AUId | Where-Object { ($_.RoleObjectId -eq $Script:AuthAdminRoleID) -and ($_.RoleMemberInfo.ObjectId -eq $AuthAdminUser.ObjectId) }).Count -gt 1)

		if ($IsInRoleAlready)
		{
			Write-Warning "$($AuthAdminUser.UserPrincipalName) is already an Authentication Administrator in AU: $AdministrativeUnitName"
			return
		}
		
		$RoleMemberInfo = New-Object -TypeName Microsoft.Open.AzureAD.Model.RoleMemberInfo -ErrorAction Stop
		$RoleMemberInfo.ObjectId = $AuthAdminUser.ObjectId
		Add-AzureADScopedRoleMembership -ObjectId $AUId -RoleObjectId $AuthAdminRoleID -RoleMemberInfo $RoleMemberInfo -ErrorAction Stop | Out-Null
		Write-Verbose "Added $($AuthAdminUser.UserPrincipalName) as an Authentication Administrator to AU: $AdministrativeUnitName"
	}
	catch
	{
		Write-Error "Unable to user $($AuthAdminUser.UserPrincipalName) as an Authentication Administrator to AU: $AdministrativeUnitName"
		return
	}
}
Export-ModuleMember -Function 'Add-DelegatedAuthAdminsToAU'

<#
.SYNOPSIS
Removes a delegate Authentication Administrator from an Administrative Unit.

.DESCRIPTION
This cmdlet allows to remove the delegation of the Authentication Administrator role on a specific Administrative Unit.

.PARAMETER AdministrativeUnitName
The name of the Administrative Unit from which to remove the delegated Authentication Administrator.

.PARAMETER AuthenticationAdminUPN
The UserPrincipalName of the delegated Authentication Administrator to remove.

.EXAMPLE
Remove-DelegatedAuthAdminsToAU -AdministrativeUnitName AUName -AuthenticationAdminUPN AdminUPN

Removes user with UserPrincipalName AdminUPN as an Authentication Administrator from the Administrative Unit AUName.

.INPUTS
None

.OUTPUTS
None

.NOTES
An error is generated if the user with UserPrincipalName supplied is not delegated as an Authentication Administrator on the Administrative Unit.

An error is also generated if the calling user doesn't have permissions to perform the operation.
#>
function Remove-DelegatedAuthAdminsToAU
{
	[CmdletBinding()]

	param
	(
		[Parameter(Mandatory = $true)]
		[Alias('AUName')]
		[string]
		[ValidateNotNullOrEmpty()]
		$AdministrativeUnitName,

		[Parameter(Mandatory = $true)]
		[Alias('UPN')]
		[string]
		[ValidateNotNullOrEmpty()]
		$AuthenticationAdminUPN		
	)

	$AUId = Get-AUByName -AUName $AdministrativeUnitName
	if (!$AUId)
	{
		Write-Error "Cannot find Administrative Unit with name: $AdministrativeUnitName"
		return
	}

	if (!(Get-AuthAdminRoleID))
	{
		Write-Error "Unable to get the role ID for the Authentication Administrator role"
		return
	}

	$AuthAdminUser = Get-MFAUser -UserPrincipalName $AuthenticationAdminUPN
	if ($null -eq $AuthAdminUser)
	{
		Write-Error "Cannot find user with UPN $AuthenticationAdminUPN"
		return
	}

	try
	{
		$RoleInfo = Get-AzureADScopedRoleMembership -ObjectId $AUId | Where-Object { ($_.RoleObjectId -eq $Script:AuthAdminRoleID) -and ($_.RoleMemberInfo.ObjectId -eq $AuthAdminUser.ObjectId) }

		if ($null -eq $RoleInfo)
		{
			Write-Warning "$($AuthAdminUser.UserPrincipalName) is not an Authentication Administrator in AU: $AdministrativeUnitName"
			return
		}
		
		Remove-AzureADScopedRoleMembership -ObjectId $AUId -ScopedRoleMembershipId $RoleInfo.Id
		Write-Verbose "Removed $($AuthAdminUser.UserPrincipalName) as an Authentication Administrator to AU: $AdministrativeUnitName"
	}
	catch
	{
		Write-Error "Unable to remove $($AuthAdminUser.UserPrincipalName) as an Authentication Administrator to AU: $AdministrativeUnitName"
		return
	}
}
Export-ModuleMember -Function 'Remove-DelegatedAuthAdminsToAU'